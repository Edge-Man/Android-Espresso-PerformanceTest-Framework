MemoryNFRManager memoryNFRManager;
    //some changes are in logic to get memory usage
    private void collectMemoryStats(String udid, String methodName, String LOB, Context context) throws InterruptedException, IOException {
        //String udid1 = NFRHelper.getDeviceUDID(context);
        memoryNFRManager = new MemoryNFRManager();
        getTestCaseData(methodName, LOB,udid, memoryNFRManager);
        if (udid != null) {
            GetMemory.getMem(context, memoryNFRManager);
            extractmemoryStatsDebug(memoryNFRManager);
            getMemoryUsageForOOMError(memoryNFRManager);
        } else if (udid == null) {
            memoryNFRManager.setDalvikPSS(0);
            memoryNFRManager.setDalvikShared(0);
            memoryNFRManager.setDalvikPrivate(0);
            memoryNFRManager.setNativeHeapfree(0);
            memoryNFRManager.setNativeHeapUsed(0);
            memoryNFRManager.setUsedTotalMemoryInMB(0);
            memoryNFRManager.setAvailableTotalHeapSizeInMB(0);
            memoryNFRManager.setMaxTotalHeapSizeInMB(0);
        }
        publish(memoryNFRManager);
    }

    //set method name lob name device name apk version and timestamp for storing in db
    private MemoryNFRManager getTestCaseData(String methodName, String lob,String udid, MemoryNFRManager memoryNFRManager) {
        memoryNFRManager.setMethodName(methodName);
        memoryNFRManager.setLobName(lob);
        memoryNFRManager.setDeviceId(NFRHelper.getDeviceName());
        memoryNFRManager.setApkVersion(NFRHelper.getAPKNameAndVersion());
        memoryNFRManager.setTimeStamp(NFRHelper.getCurrentTimeStamp());
        return memoryNFRManager;
    }

    //for extracting native heap application data
    private void extractmemoryStatsDebug(MemoryNFRManager memoryNFRManager) {
        //long nativeHeapAllocatedSize = Debug.getNativeHeapAllocatedSize()/1024;
        memoryNFRManager.setNativeHeapUsed(Debug.getNativeHeapAllocatedSize() / 1024);
        //long nativeHeapSize = Debug.getNativeHeapSize()/1024;
        //long nativeFreeSize = nativeHeapSize - nativeHeapAllocatedSize;
        memoryNFRManager.setNativeHeapfree(Debug.getNativeHeapFreeSize() / 1024);
    }

    //inserting data into qa DB using api service to hit db
    private void publish(MemoryNFRManager memoryNFRManager1) {
        CreateDBRequest createDBRequest = new CreateDBRequest();
        createDBRequest.createAPIRequest(memoryNFRManager1, ApiUrls.MemoryUsageUrl);
    }

    //for extracting out of memory data
    private void getMemoryUsageForOOMError(MemoryNFRManager memoryNFRManager) {
        Runtime runtime = Runtime.getRuntime();
        long usedMemoryInMB = (runtime.totalMemory() - runtime.freeMemory()) / 1048576L;
        long maxHeapSizeInMB = runtime.maxMemory() / 1048576L;
        long availableHeapSizeInMB = maxHeapSizeInMB - usedMemoryInMB;
        memoryNFRManager.setUsedTotalMemoryInMB(usedMemoryInMB);
        memoryNFRManager.setMaxTotalHeapSizeInMB(maxHeapSizeInMB);
        memoryNFRManager.setAvailableTotalHeapSizeInMB(availableHeapSizeInMB);
    }



    public void perform(Functionality functionality, String[] testSetUpParam, Context context) throws SQLException, IOException {
        try {
            switch (functionality.toString().toUpperCase()) {
                case "COLLECT":
                    collectMemoryStats(testSetUpParam[0], testSetUpParam[1], testSetUpParam[2], context);
                    break;
                case "PUBLISH":
                   // publish();
                    break;
                default:
                    System.out.println("Invalid Input received");
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
